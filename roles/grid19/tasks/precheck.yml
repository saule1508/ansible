---

- name: getent group
  getent:
    database: group

- name: getent password
  getent:
    database: passwd

- assert:
    msg: "User {{ grid_osuser }} is not defined"
    quiet: no
    that:
      - getent_passwd['{{ grid_osuser }}'] is defined


# check that the OS group for the oraInventory exists
- assert:
    msg: group {{ orainventory.osgroup }} exists
    that:
      - getent_group['{{ orainventory.osgroup }}'] is defined

# checks that the operating group for ASM exist
- assert:
    that:
      - getent_group[oracle.install.asm['{{ item }}']] is defined
    msg: group {{ oracle.install.asm[item] }} exist
  with_items: "{{ oracle.install.asm }}"

- name: make sure user {{ grid_osuser }} is in the defined groups and primary group is {{ orainventory.osgroup }}
  user:
    name: "{{ grid_osuser }}"
    groups: "{{ orainventory.osgroup }}, {{ oracle.install.asm.OSDBA }}, {{ oracle.install.asm.OSOPER }}, {{ oracle.install.asm.OSASM }}"
    append: yes
    group: "{{ orainventory.osgroup }}"
    generate_ssh_key: yes

- name: get cluster scan resolution
  command: "nslookup {{clustername}}-scan.{{domain}}"
  register: nslookup_scan

- name: check that cluster scan resolves to 3 ip addresses
  assert:
    that: 
      - "{{ nslookup_scan.stdout_lines | select('match','^Name:') | list | length }} == 3"

- name: check asm disks
  stat:
    path: "{{ item }}"
    follow: "yes"
  with_items: "{{ asm.diskgroup.disks }}"
  register: asm_disks

- name: check asm disks exists for disk group
  assert:
    that:
      -  item.stat.exists
      -  "item.stat.pw_name == '{{ grid_osuser }}'"
      -  "item.stat.gr_name == '{{ oracle.install.asm.OSDBA }}'"
  with_items: "{{ asm_disks.results }}"

- name: get asm disks for GIMR
  stat:
    path: "{{ item }}"
    follow: "yes"
  with_items: "{{ asm.gimrDG.disks }}"
  register: asm_gimr_disks
  when: configureGIMR == True

- name: check asm disks exists for GIMR diskgroup
  assert:
    that:
      -  item.stat.exists
      -  "item.stat.pw_name == '{{ grid_osuser }}'"
      -  "item.stat.gr_name == '{{ oracle.install.asm.OSDBA }}'"
  with_items: "{{ asm_gimr_disks }}"
  when: configureGIMR == True

- assert:
    that:
      - lan.public.name in ansible_facts.interfaces

- assert:
    that:
      - item['name'] in ansible_facts['interfaces']
  with_items: " {{ lan.private }}"

...
