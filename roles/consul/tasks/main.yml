---
  # copied over from euranova MVP - to be documented and improved

  - debug: var=consul_ver

  # let us use a group called consul
  - add_host:
      name: "{{ item }}"
      groups: consul
    with_items: "{{ groups.phoenix }}"
    when: groups.consul is undefined
    changed_when: false

  # if we have one node, then it is a server
  # if we have two nodes, the fist is a server and the second a client
  # if we have more than two nodes, the first 3 are servers and the others client
  # TODO: let the user define the group consult upfront and use info from there
  #       see also on ansible galaxy a complete role that could be integrated

  - set_fact:
      consul_server: "{{ ( groups['consul'].index(inventory_hostname) == 0) | ternary(true,false) }}"
      consul_nbr_server: 1
    when: |
       (groups['consul'] | length) < 3

  - set_fact:
      consul_server: "{{ ( groups['consul'].index(inventory_hostname) < 3) | ternary(true,false) }}"
      consul_nbr_server: 3
    when: |
       (groups['consul'] | length) > 2

  - debug: var=consul_nbr_server

  - name: consul - install unzip
    yum:
      name: unzip
      state: present
 
  - name: consul - install bind-utils
    yum:
      name: bind-utils
      state: present

  - name: consul - install epel
    yum:
      name: epel-release
      state: present

  - name: consul - install jq
    yum:
      name: jq
      state: present

  - stat: path=/usr/local/bin/consul
    register: consul_exists

  - debug: 
      msg: "consul does not exist"
    when: consul_exists.stat.exists == False

  - debug: 
      msg: "consul does exist"
    when: consul_exists.stat.exists == True

  - name: consul - get consul binary
    get_url:
      url: "https://releases.hashicorp.com/consul/{{ consul_ver }}/consul_{{ consul_ver }}_linux_amd64.zip"
      dest: "/opt/consul_{{ consul_ver }}_linux_amd64.zip"
    when: consul_exists.stat.exists == False

  - name: consul - unarchive consul
    unarchive:
      src: "/opt/consul_{{ consul_ver }}_linux_amd64.zip"
      dest: /usr/local/bin
      copy: no
    when: consul_exists.stat.exists == False

  - name: consul - add user
    user:
      name: consul
      group: bin
      #uid: 1000
      generate_ssh_key: no
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa
      comment: "consul user"
      state: present

  - name: consul - create dirs
    file: 
      path: "{{ item  }}" 
      state: directory 
      mode: 0755 
      owner: consul
      group: bin
    with_items:
    - /etc/consul.d/server
    - /etc/consul.d/client
    - /var/consul

  - name: firewall port for consul
    firewalld:
      port: "{{ item }}"
      permanent: true
      state: enabled
      immediate: yes
    with_items:
      - 8301/tcp
      - 8500/tcp


  - name: consul - systemd
    template:
      src: "consul-systemd.service.j2"
      dest: /etc/systemd/system/consul.service
    vars:
      consul_server_type: "{{ consul_server | ternary('server', 'client') }}"

  - name: consul - config
    template:
      src: "consul-config.json.j2"
      dest: /etc/consul.d/{{ consul_server | ternary('server', 'client') }}/config.json
    vars:
      bootstrap: "{{ (consul_nbr_server == 1) | ternary('true', 'false') }}"
      #join_server: "{{ consul_bootstrap_server | ternary('', consul_join_server) }}"
      #advertise_addr: "{{ consul_advertise_address }}"
      # TODO : use best local DNS resolv rather than google.
      dns_recursor: "8.8.8.8"

#  - name: consul - start service
#    service: 
#      name: consul 
#      state: started
#      enabled: yes


...
